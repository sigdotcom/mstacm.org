{"ast":null,"code":"import * as React from 'react';\nimport { getStateFromPath, getActionFromState, NavigationContext } from '@react-navigation/core';\nimport LinkingContext from \"./LinkingContext\";\nexport default function useLinkTo() {\n  var navigation = React.useContext(NavigationContext);\n  var linking = React.useContext(LinkingContext);\n  var linkTo = React.useCallback(function (path) {\n    if (!path.startsWith('/')) {\n      throw new Error(\"The path must start with '/' (\".concat(path, \").\"));\n    }\n\n    if (navigation === undefined) {\n      throw new Error(\"Couldn't find a navigation object. Is your component inside a screen in a navigator?\");\n    }\n\n    var options = linking.options;\n    var state = (options === null || options === void 0 ? void 0 : options.getStateFromPath) ? options.getStateFromPath(path, options.config) : getStateFromPath(path, options === null || options === void 0 ? void 0 : options.config);\n\n    if (state) {\n      var root = navigation;\n      var current;\n\n      while (current = root.dangerouslyGetParent()) {\n        root = current;\n      }\n\n      var action = getActionFromState(state);\n\n      if (action !== undefined) {\n        root.dispatch(action);\n      } else {\n        root.reset(state);\n      }\n    } else {\n      throw new Error('Failed to parse the path to a navigation state.');\n    }\n  }, [linking, navigation]);\n  return linkTo;\n}","map":{"version":3,"sources":["useLinkTo.tsx"],"names":["navigation","React","linking","linkTo","path","options","state","getStateFromPath","root","current","action","getActionFromState"],"mappings":"AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,gBAAA,EAAA,kBAAA,EAAA,iBAAA,QAAA,wBAAA;AAKA,OAAA,cAAA;AAEA,eAAe,SAAA,SAAA,GAAqB;AAClC,MAAMA,UAAU,GAAGC,KAAK,CAALA,UAAAA,CAAnB,iBAAmBA,CAAnB;AACA,MAAMC,OAAO,GAAGD,KAAK,CAALA,UAAAA,CAAhB,cAAgBA,CAAhB;AAEA,MAAME,MAAM,GAAG,KAAK,CAAL,WAAA,CACZC,UAAAA,IAAD,EAAkB;AAChB,QAAI,CAACA,IAAI,CAAJA,UAAAA,CAAL,GAAKA,CAAL,EAA2B;AACzB,YAAM,IAAA,KAAA,CAAA,iCAAA,MAAA,CAAA,IAAA,EAAN,IAAM,CAAA,CAAN;AACD;;AAED,QAAIJ,UAAU,KAAd,SAAA,EAA8B;AAC5B,YAAM,IAAA,KAAA,CAAN,sFAAM,CAAN;AAGD;;AATe,QAWRK,OAXQ,GAWhB,OAXgB,CAWRA,OAXQ;AAahB,QAAMC,KAAK,GAAG,CAAA,OAAO,KAAP,IAAA,IAAA,OAAO,KAAA,KAAP,CAAA,GAAA,KAAA,CAAA,GAAA,OAAO,CAAP,gBAAA,IACVD,OAAO,CAAPA,gBAAAA,CAAAA,IAAAA,EAA+BA,OAAO,CAD5B,MACVA,CADU,GAEVE,gBAAgB,CAAA,IAAA,EAAOF,OAAP,KAAA,IAAOA,IAAAA,OAAP,KAAA,KAAA,CAAOA,GAAP,KAAA,CAAOA,GAAAA,OAAO,CAFlC,MAEoB,CAFpB;;AAIA,QAAA,KAAA,EAAW;AACT,UAAIG,IAAI,GAAR,UAAA;AACA,UAFS,OAET;;AAGA,aAAQC,OAAO,GAAGD,IAAI,CAAtB,oBAAkBA,EAAlB,EAAgD;AAC9CA,QAAAA,IAAI,GAAJA,OAAAA;AACD;;AAED,UAAME,MAAM,GAAGC,kBAAkB,CAAjC,KAAiC,CAAjC;;AAEA,UAAID,MAAM,KAAV,SAAA,EAA0B;AACxBF,QAAAA,IAAI,CAAJA,QAAAA,CAAAA,MAAAA;AADF,OAAA,MAEO;AACLA,QAAAA,IAAI,CAAJA,KAAAA,CAAAA,KAAAA;AACD;AAfH,KAAA,MAgBO;AACL,YAAM,IAAA,KAAA,CAAN,iDAAM,CAAN;AACD;AApCU,GAAA,EAsCb,CAAA,OAAA,EAtCF,UAsCE,CAtCa,CAAf;AAyCA,SAAA,MAAA;AACD","sourcesContent":["import * as React from 'react';\nimport {\n  getStateFromPath,\n  getActionFromState,\n  NavigationContext,\n} from '@react-navigation/core';\nimport LinkingContext from './LinkingContext';\n\nexport default function useLinkTo() {\n  const navigation = React.useContext(NavigationContext);\n  const linking = React.useContext(LinkingContext);\n\n  const linkTo = React.useCallback(\n    (path: string) => {\n      if (!path.startsWith('/')) {\n        throw new Error(`The path must start with '/' (${path}).`);\n      }\n\n      if (navigation === undefined) {\n        throw new Error(\n          \"Couldn't find a navigation object. Is your component inside a screen in a navigator?\"\n        );\n      }\n\n      const { options } = linking;\n\n      const state = options?.getStateFromPath\n        ? options.getStateFromPath(path, options.config)\n        : getStateFromPath(path, options?.config);\n\n      if (state) {\n        let root = navigation;\n        let current;\n\n        // Traverse up to get the root navigation\n        while ((current = root.dangerouslyGetParent())) {\n          root = current;\n        }\n\n        const action = getActionFromState(state);\n\n        if (action !== undefined) {\n          root.dispatch(action);\n        } else {\n          root.reset(state);\n        }\n      } else {\n        throw new Error('Failed to parse the path to a navigation state.');\n      }\n    },\n    [linking, navigation]\n  );\n\n  return linkTo;\n}\n"]},"metadata":{},"sourceType":"module"}