{"ast":null,"code":"export default function checkLegacyPathConfig(config) {\n  var legacy = false;\n\n  if (config) {\n    legacy = Object.keys(config).some(function (key) {\n      return key !== 'screens' && key !== 'initialRouteName';\n    });\n\n    if (legacy && (config.hasOwnProperty('screens') || config.hasOwnProperty('initialRouteName'))) {\n      throw new Error('Found invalid keys in the configuration object. See https://reactnavigation.org/docs/configuring-links/ for more details on the shape of the configuration object.');\n    }\n  }\n\n  if (legacy) {\n    return [legacy, {\n      screens: config\n    }];\n  }\n\n  return [legacy, config];\n}","map":{"version":3,"sources":["checkLegacyPathConfig.tsx"],"names":["legacy","Object","key","config","screens"],"mappings":"AAOA,eAAe,SAAA,qBAAA,CAAA,MAAA,EAEmB;AAChC,MAAIA,MAAM,GAAV,KAAA;;AAEA,MAAA,MAAA,EAAY;AAEVA,IAAAA,MAAM,GAAGC,MAAM,CAANA,IAAAA,CAAAA,MAAAA,EAAAA,IAAAA,CACNC,UAAAA,GAAD;AAAA,aAASA,GAAG,KAAHA,SAAAA,IAAqBA,GAAG,KADnCF,kBACE;AAAA,KADOC,CAATD;;AAIA,QACEA,MAAM,KACLG,MAAM,CAANA,cAAAA,CAAAA,SAAAA,KACCA,MAAM,CAANA,cAAAA,CAHJ,kBAGIA,CAFI,CADR,EAIE;AACA,YAAM,IAAA,KAAA,CAAN,oKAAM,CAAN;AAGD;AACF;;AAED,MAAA,MAAA,EAAY;AAEV,WAAO,CAAA,MAAA,EAAS;AAAEC,MAAAA,OAAO,EAAED;AAAX,KAAT,CAAP;AACD;;AAED,SAAO,CAAA,MAAA,EAAP,MAAO,CAAP;AACD","sourcesContent":["import type { PathConfigMap } from './types';\n\ntype Options = {\n  initialRouteName?: string;\n  screens: PathConfigMap;\n};\n\nexport default function checkLegacyPathConfig(\n  config?: Options\n): [boolean, Options | undefined] {\n  let legacy = false;\n\n  if (config) {\n    // Assume legacy configuration if config has any other keys except `screens` and `initialRouteName`\n    legacy = Object.keys(config).some(\n      (key) => key !== 'screens' && key !== 'initialRouteName'\n    );\n\n    if (\n      legacy &&\n      (config.hasOwnProperty('screens') ||\n        config.hasOwnProperty('initialRouteName'))\n    ) {\n      throw new Error(\n        'Found invalid keys in the configuration object. See https://reactnavigation.org/docs/configuring-links/ for more details on the shape of the configuration object.'\n      );\n    }\n  }\n\n  if (legacy) {\n    // @ts-expect-error: we have incorrect type for config since we don't type legacy config\n    return [legacy, { screens: config }];\n  }\n\n  return [legacy, config];\n}\n"]},"metadata":{},"sourceType":"module"}