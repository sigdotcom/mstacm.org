{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport color from 'color';\nimport { useTheme } from '@react-navigation/native';\nexport default function Badge(_ref) {\n  var _ref$visible = _ref.visible,\n      visible = _ref$visible === void 0 ? true : _ref$visible,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 18 : _ref$size,\n      children = _ref.children,\n      style = _ref.style,\n      rest = _objectWithoutProperties(_ref, [\"visible\", \"size\", \"children\", \"style\"]);\n\n  var _React$useState = React.useState(function () {\n    return new Animated.Value(visible ? 1 : 0);\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 1),\n      opacity = _React$useState2[0];\n\n  var _React$useState3 = React.useState(visible ? true : false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      rendered = _React$useState4[0],\n      setRendered = _React$useState4[1];\n\n  var theme = useTheme();\n  React.useEffect(function () {\n    if (!rendered) {\n      return;\n    }\n\n    Animated.timing(opacity, {\n      toValue: visible ? 1 : 0,\n      duration: 150,\n      useNativeDriver: true\n    }).start(function (_ref2) {\n      var finished = _ref2.finished;\n\n      if (finished && !visible) {\n        setRendered(false);\n      }\n    });\n  }, [opacity, rendered, visible]);\n\n  if (visible && !rendered) {\n    setRendered(true);\n  }\n\n  if (!visible && !rendered) {\n    return null;\n  }\n\n  var _ref3 = StyleSheet.flatten(style) || {},\n      _ref3$backgroundColor = _ref3.backgroundColor,\n      backgroundColor = _ref3$backgroundColor === void 0 ? theme.colors.notification : _ref3$backgroundColor,\n      restStyle = _objectWithoutProperties(_ref3, [\"backgroundColor\"]);\n\n  var textColor = color(backgroundColor).isLight() ? 'black' : 'white';\n  var borderRadius = size / 2;\n  var fontSize = Math.floor(size * 3 / 4);\n  return React.createElement(Animated.Text, _extends({\n    numberOfLines: 1,\n    style: [{\n      opacity: opacity,\n      transform: [{\n        scale: opacity.interpolate({\n          inputRange: [0, 1],\n          outputRange: [0.5, 1]\n        })\n      }],\n      backgroundColor: backgroundColor,\n      color: textColor,\n      fontSize: fontSize,\n      lineHeight: size - 1,\n      height: size,\n      minWidth: size,\n      borderRadius: borderRadius\n    }, styles.container, restStyle]\n  }, rest), children);\n}\nvar styles = StyleSheet.create({\n  container: {\n    alignSelf: 'flex-end',\n    textAlign: 'center',\n    paddingHorizontal: 4,\n    overflow: 'hidden'\n  }\n});","map":{"version":3,"sources":["Badge.tsx"],"names":["visible","size","rest","React","Animated","theme","useTheme","toValue","duration","useNativeDriver","finished","setRendered","backgroundColor","restStyle","StyleSheet","textColor","color","borderRadius","fontSize","Math","opacity","transform","scale","inputRange","outputRange","lineHeight","height","minWidth","styles","container","alignSelf","textAlign","paddingHorizontal","overflow"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, StyleSheet, StyleProp, TextStyle } from 'react-native';\nimport color from 'color';\nimport { useTheme } from '@react-navigation/native';\n\ntype Props = {\n  /**\n   * Whether the badge is visible\n   */\n  visible: boolean;\n  /**\n   * Content of the `Badge`.\n   */\n  children?: string | number;\n  /**\n   * Size of the `Badge`.\n   */\n  size?: number;\n  /**\n   * Style object for the tab bar container.\n   */\n  style?: Animated.WithAnimatedValue<StyleProp<TextStyle>>;\n};\n\nexport default function Badge({\n  visible = true,\n  size = 18,\n  children,\n  style,\n  ...rest\n}: Props) {\n  const [opacity] = React.useState(() => new Animated.Value(visible ? 1 : 0));\n  const [rendered, setRendered] = React.useState(visible ? true : false);\n\n  const theme = useTheme();\n\n  React.useEffect(() => {\n    if (!rendered) {\n      return;\n    }\n\n    Animated.timing(opacity, {\n      toValue: visible ? 1 : 0,\n      duration: 150,\n      useNativeDriver: true,\n    }).start(({ finished }) => {\n      if (finished && !visible) {\n        setRendered(false);\n      }\n    });\n  }, [opacity, rendered, visible]);\n\n  if (visible && !rendered) {\n    setRendered(true);\n  }\n\n  if (!visible && !rendered) {\n    return null;\n  }\n\n  // @ts-expect-error: backgroundColor definitely exists\n  const { backgroundColor = theme.colors.notification, ...restStyle } =\n    StyleSheet.flatten(style) || {};\n  const textColor = color(backgroundColor).isLight() ? 'black' : 'white';\n\n  const borderRadius = size / 2;\n  const fontSize = Math.floor((size * 3) / 4);\n\n  return (\n    <Animated.Text\n      numberOfLines={1}\n      style={[\n        {\n          opacity,\n          transform: [\n            {\n              scale: opacity.interpolate({\n                inputRange: [0, 1],\n                outputRange: [0.5, 1],\n              }),\n            },\n          ],\n          backgroundColor,\n          color: textColor,\n          fontSize,\n          lineHeight: size - 1,\n          height: size,\n          minWidth: size,\n          borderRadius,\n        },\n        styles.container,\n        restStyle,\n      ]}\n      {...rest}\n    >\n      {children}\n    </Animated.Text>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    alignSelf: 'flex-end',\n    textAlign: 'center',\n    paddingHorizontal: 4,\n    overflow: 'hidden',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}