{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nvar Screens;\n\ntry {\n  Screens = require('react-native-screens');\n} catch (e) {}\n\nvar WebScreen = function (_React$Component) {\n  _inherits(WebScreen, _React$Component);\n\n  var _super = _createSuper(WebScreen);\n\n  function WebScreen() {\n    _classCallCheck(this, WebScreen);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(WebScreen, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          active = _this$props.active,\n          style = _this$props.style,\n          rest = _objectWithoutProperties(_this$props, [\"active\", \"style\"]);\n\n      return React.createElement(View, _extends({\n        hidden: !active,\n        style: [style, {\n          display: active ? 'flex' : 'none'\n        }]\n      }, rest));\n    }\n  }]);\n\n  return WebScreen;\n}(React.Component);\n\nvar AnimatedWebScreen = Animated.createAnimatedComponent(WebScreen);\nexport var MaybeScreenContainer = function MaybeScreenContainer(_ref) {\n  var enabled = _ref.enabled,\n      rest = _objectWithoutProperties(_ref, [\"enabled\"]);\n\n  if (enabled && Platform.OS !== 'web' && Screens && Screens.screensEnabled()) {\n    return React.createElement(Screens.ScreenContainer, rest);\n  }\n\n  return React.createElement(View, rest);\n};\nexport var MaybeScreen = function MaybeScreen(_ref2) {\n  var enabled = _ref2.enabled,\n      active = _ref2.active,\n      rest = _objectWithoutProperties(_ref2, [\"enabled\", \"active\"]);\n\n  if (enabled && Platform.OS === 'web') {\n    return React.createElement(AnimatedWebScreen, _extends({\n      active: active\n    }, rest));\n  }\n\n  if (enabled && Screens && Screens.screensEnabled()) {\n    return React.createElement(Screens.Screen, _extends({\n      active: active\n    }, rest));\n  }\n\n  return React.createElement(View, rest);\n};","map":{"version":3,"sources":["Screens.tsx"],"names":["Screens","require","React","rest","display","active","AnimatedWebScreen","Animated","MaybeScreenContainer","enabled","Platform","MaybeScreen"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;;AAGA,IAAA,OAAA;;AAEA,IAAI;AACFA,EAAAA,OAAO,GAAGC,OAAO,CAAjBD,sBAAiB,CAAjBA;AADF,CAAA,CAEE,OAAA,CAAA,EAAU,CAIZ;;IAGA,S;;;;;;;;;;;;;6BAMW;AAAA,wBAC4B,KAAnC,KADO;AAAA,UACD,MADC,eACD,MADC;AAAA,UACD,KADC,eACD,KADC;AAAA,UACmBG,IADnB;;AAGP,aACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;AAEE,QAAA,MAAM,EAAE,CAFV,MAAA;AAGE,QAAA,KAAK,EAAE,CAAA,KAAA,EAAQ;AAAEC,UAAAA,OAAO,EAAEC,MAAM,GAAA,MAAA,GAAY;AAA7B,SAAR;AAHT,OAAA,EADF,IACE,CAAA,CADF;AAQD;;;;EAjBqBH,KAAK,CAA7B,S;;AAoBA,IAAMI,iBAAiB,GAAGC,QAAQ,CAARA,uBAAAA,CAA1B,SAA0BA,CAA1B;AAEA,OAAO,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,OAM9B;AAAA,MAN+B,OAM/B,QAN+B,OAM/B;AAAA,MAJDL,IAIC;;AACJ,MAAIM,OAAO,IAAIC,QAAQ,CAARA,EAAAA,KAAXD,KAAAA,IAAAA,OAAAA,IAA+CT,OAAO,CAA1D,cAAmDA,EAAnD,EAA6E;AAC3E,WAAO,KAAA,CAAA,aAAA,CAAC,OAAD,CAAA,eAAA,EAAP,IAAO,CAAP;AACD;;AAED,SAAO,KAAA,CAAA,aAAA,CAAA,IAAA,EAAP,IAAO,CAAP;AAXK,CAAA;AAcP,OAAO,IAAMW,WAAW,GAAG,SAAdA,WAAc,QAQrB;AAAA,MARsB,OAQtB,SARsB,OAQtB;AAAA,MARsB,MAQtB,SARsB,MAQtB;AAAA,MALDR,IAKC;;AACJ,MAAIM,OAAO,IAAIC,QAAQ,CAARA,EAAAA,KAAf,KAAA,EAAsC;AACpC,WAAO,KAAA,CAAA,aAAA,CAAA,iBAAA,EAAA,QAAA,CAAA;AAAmB,MAAA,MAAM,EAAEL;AAA3B,KAAA,EAAP,IAAO,CAAA,CAAP;AACD;;AAED,MAAII,OAAO,IAAPA,OAAAA,IAAsBT,OAAO,CAAjC,cAA0BA,EAA1B,EAAoD;AAElD,WAAO,KAAA,CAAA,aAAA,CAAC,OAAD,CAAA,MAAA,EAAA,QAAA,CAAA;AAAgB,MAAA,MAAM,EAAEK;AAAxB,KAAA,EAAP,IAAO,CAAA,CAAP;AACD;;AAED,SAAO,KAAA,CAAA,aAAA,CAAA,IAAA,EAAP,IAAO,CAAP;AAlBK,CAAA","sourcesContent":["import * as React from 'react';\nimport { Animated, View, Platform, ViewProps } from 'react-native';\n\nlet Screens: typeof import('react-native-screens') | undefined;\n\ntry {\n  Screens = require('react-native-screens');\n} catch (e) {\n  // Ignore\n}\n\n// The web implementation in react-native-screens seems buggy.\n// The view doesn't become visible after coming back in some cases.\n// So we use our custom implementation.\nclass WebScreen extends React.Component<\n  ViewProps & {\n    active: number;\n    children: React.ReactNode;\n  }\n> {\n  render() {\n    const { active, style, ...rest } = this.props;\n\n    return (\n      <View\n        // @ts-expect-error: hidden exists on web, but not in React Native\n        hidden={!active}\n        style={[style, { display: active ? 'flex' : 'none' }]}\n        {...rest}\n      />\n    );\n  }\n}\n\nconst AnimatedWebScreen = Animated.createAnimatedComponent(WebScreen);\n\nexport const MaybeScreenContainer = ({\n  enabled,\n  ...rest\n}: ViewProps & {\n  enabled: boolean;\n  children: React.ReactNode;\n}) => {\n  if (enabled && Platform.OS !== 'web' && Screens && Screens.screensEnabled()) {\n    return <Screens.ScreenContainer {...rest} />;\n  }\n\n  return <View {...rest} />;\n};\n\nexport const MaybeScreen = ({\n  enabled,\n  active,\n  ...rest\n}: ViewProps & {\n  enabled: boolean;\n  active: 0 | 1 | Animated.AnimatedInterpolation;\n  children: React.ReactNode;\n}) => {\n  if (enabled && Platform.OS === 'web') {\n    return <AnimatedWebScreen active={active} {...rest} />;\n  }\n\n  if (enabled && Screens && Screens.screensEnabled()) {\n    // @ts-expect-error: stackPresentation is incorrectly marked as required\n    return <Screens.Screen active={active} {...rest} />;\n  }\n\n  return <View {...rest} />;\n};\n"]},"metadata":{},"sourceType":"module"}