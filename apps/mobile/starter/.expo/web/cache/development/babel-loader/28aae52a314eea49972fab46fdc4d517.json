{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport queryString from 'query-string';\nimport checkLegacyPathConfig from \"./checkLegacyPathConfig\";\n\nvar getActiveRoute = function getActiveRoute(state) {\n  var route = typeof state.index === 'number' ? state.routes[state.index] : state.routes[state.routes.length - 1];\n\n  if (route.state) {\n    return getActiveRoute(route.state);\n  }\n\n  return route;\n};\n\nexport default function getPathFromState(state, options) {\n  if (state == null) {\n    throw Error(\"Got 'undefined' for the navigation state. You must pass a valid state object.\");\n  }\n\n  var _checkLegacyPathConfi = checkLegacyPathConfig(options),\n      _checkLegacyPathConfi2 = _slicedToArray(_checkLegacyPathConfi, 2),\n      legacy = _checkLegacyPathConfi2[0],\n      compatOptions = _checkLegacyPathConfi2[1];\n\n  var configs = compatOptions ? createNormalizedConfigs(legacy, compatOptions.screens) : {};\n  var path = '/';\n  var current = state;\n  var allParams = {};\n\n  var _loop = function _loop() {\n    var index = typeof current.index === 'number' ? current.index : 0;\n    var route = current.routes[index];\n    var pattern = void 0;\n    var focusedParams = void 0;\n    var focusedRoute = getActiveRoute(state);\n    var currentOptions = configs;\n    var nestedRouteNames = [];\n    var hasNext = true;\n\n    while (route.name in currentOptions && hasNext) {\n      pattern = currentOptions[route.name].pattern;\n      nestedRouteNames.push(route.name);\n\n      if (route.params) {\n        (function () {\n          var stringify = (_currentOptions$route = currentOptions[route.name]) === null || _currentOptions$route === void 0 ? void 0 : _currentOptions$route.stringify;\n          var currentParams = fromEntries(Object.entries(route.params).map(function (_ref) {\n            var _ref2 = _slicedToArray(_ref, 2),\n                key = _ref2[0],\n                value = _ref2[1];\n\n            return [key, (stringify === null || stringify === void 0 ? void 0 : stringify[key]) ? stringify[key](value) : String(value)];\n          }));\n\n          if (pattern) {\n            _extends(allParams, currentParams);\n          }\n\n          if (focusedRoute === route) {\n            focusedParams = _objectSpread({}, currentParams);\n            (_pattern = pattern) === null || _pattern === void 0 ? void 0 : _pattern.split('/').filter(function (p) {\n              return p.startsWith(':');\n            }).forEach(function (p) {\n              var name = getParamName(p);\n\n              if (focusedParams) {\n                delete focusedParams[name];\n              }\n            });\n          }\n        })();\n      }\n\n      if (!currentOptions[route.name].screens || route.state === undefined) {\n        hasNext = false;\n      } else {\n        index = typeof route.state.index === 'number' ? route.state.index : route.state.routes.length - 1;\n        var nextRoute = route.state.routes[index];\n        var nestedConfig = currentOptions[route.name].screens;\n\n        if (nestedConfig && nextRoute.name in nestedConfig) {\n          route = nextRoute;\n          currentOptions = nestedConfig;\n        } else {\n          hasNext = false;\n        }\n      }\n    }\n\n    if (pattern === undefined) {\n      pattern = nestedRouteNames.join('/');\n    }\n\n    if (currentOptions[route.name] !== undefined) {\n      path += pattern.split('/').map(function (p) {\n        var name = getParamName(p);\n\n        if (p === '*') {\n          if (legacy) {\n            throw new Error(\"Please update your config to the new format to use wildcard pattern ('*'). https://reactnavigation.org/docs/configuring-links/#updating-config\");\n          }\n\n          return route.name;\n        }\n\n        if (p.startsWith(':')) {\n          var value = allParams[name];\n\n          if (value === undefined && p.endsWith('?')) {\n            return '';\n          }\n\n          return encodeURIComponent(value);\n        }\n\n        return encodeURIComponent(p);\n      }).join('/');\n    } else {\n      path += encodeURIComponent(route.name);\n    }\n\n    if (!focusedParams) {\n      focusedParams = focusedRoute.params;\n    }\n\n    if (route.state) {\n      path += '/';\n    } else if (focusedParams) {\n      for (var param in focusedParams) {\n        if (focusedParams[param] === 'undefined') {\n          delete focusedParams[param];\n        }\n      }\n\n      var query = queryString.stringify(focusedParams);\n\n      if (query) {\n        path += \"?\".concat(query);\n      }\n    }\n\n    current = route.state;\n  };\n\n  while (current) {\n    var _currentOptions$route;\n\n    var _pattern;\n\n    _loop();\n  }\n\n  path = path.replace(/\\/+/g, '/');\n  path = path.length > 1 ? path.replace(/\\/$/, '') : path;\n  return path;\n}\n\nvar fromEntries = function fromEntries(entries) {\n  return entries.reduce(function (acc, _ref3) {\n    var _ref4 = _slicedToArray(_ref3, 2),\n        k = _ref4[0],\n        v = _ref4[1];\n\n    acc[k] = v;\n    return acc;\n  }, {});\n};\n\nvar getParamName = function getParamName(pattern) {\n  return pattern.replace(/^:/, '').replace(/\\?$/, '');\n};\n\nvar joinPaths = function joinPaths() {\n  var _ref5;\n\n  for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n    paths[_key] = arguments[_key];\n  }\n\n  return (_ref5 = []).concat.apply(_ref5, _toConsumableArray(paths.map(function (p) {\n    return p.split('/');\n  }))).filter(Boolean).join('/');\n};\n\nvar createConfigItem = function createConfigItem(legacy, config, parentPattern) {\n  var _pattern2;\n\n  if (typeof config === 'string') {\n    var _pattern3 = parentPattern ? joinPaths(parentPattern, config) : config;\n\n    return {\n      pattern: _pattern3\n    };\n  }\n\n  var pattern;\n\n  if (legacy) {\n    pattern = config.exact !== true && parentPattern && config.path ? joinPaths(parentPattern, config.path) : config.path;\n  } else {\n    if (config.exact && config.path === undefined) {\n      throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n    }\n\n    pattern = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n  }\n\n  var screens = config.screens ? createNormalizedConfigs(legacy, config.screens, pattern) : undefined;\n  return {\n    pattern: (_pattern2 = pattern) === null || _pattern2 === void 0 ? void 0 : _pattern2.split('/').filter(Boolean).join('/'),\n    stringify: config.stringify,\n    screens: screens\n  };\n};\n\nvar createNormalizedConfigs = function createNormalizedConfigs(legacy, options, pattern) {\n  return fromEntries(Object.entries(options).map(function (_ref6) {\n    var _ref7 = _slicedToArray(_ref6, 2),\n        name = _ref7[0],\n        c = _ref7[1];\n\n    var result = createConfigItem(legacy, c, pattern);\n    return [name, result];\n  }));\n};","map":{"version":3,"sources":["getPathFromState.tsx"],"names":["getActiveRoute","state","route","Error","checkLegacyPathConfig","configs","compatOptions","createNormalizedConfigs","path","current","allParams","index","pattern","focusedParams","focusedRoute","currentOptions","nestedRouteNames","hasNext","stringify","currentParams","fromEntries","Object","String","p","name","getParamName","nextRoute","nestedConfig","value","encodeURIComponent","query","queryString","entries","acc","joinPaths","paths","createConfigItem","parentPattern","config","screens","result"],"mappings":"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","sourcesContent":["import queryString from 'query-string';\nimport type {\n  NavigationState,\n  PartialState,\n  Route,\n} from '@react-navigation/routers';\nimport checkLegacyPathConfig from './checkLegacyPathConfig';\nimport type { PathConfig, PathConfigMap } from './types';\n\ntype Options = { initialRouteName?: string; screens: PathConfigMap };\n\ntype State = NavigationState | Omit<PartialState<NavigationState>, 'stale'>;\n\ntype StringifyConfig = Record<string, (value: any) => string>;\n\ntype ConfigItem = {\n  pattern?: string;\n  stringify?: StringifyConfig;\n  screens?: Record<string, ConfigItem>;\n};\n\nconst getActiveRoute = (state: State): { name: string; params?: object } => {\n  const route =\n    typeof state.index === 'number'\n      ? state.routes[state.index]\n      : state.routes[state.routes.length - 1];\n\n  if (route.state) {\n    return getActiveRoute(route.state);\n  }\n\n  return route;\n};\n\n/**\n * Utility to serialize a navigation state object to a path string.\n *\n * Example:\n * ```js\n * getPathFromState(\n *   {\n *     routes: [\n *       {\n *         name: 'Chat',\n *         params: { author: 'Jane', id: 42 },\n *       },\n *     ],\n *   },\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         stringify: { author: author => author.toLowerCase() }\n *       }\n *     }\n *   }\n * )\n * ```\n *\n * @param state Navigation state to serialize.\n * @param options Extra options to fine-tune how to serialize the path.\n * @returns Path representing the state, e.g. /foo/bar?count=42.\n */\nexport default function getPathFromState(\n  state: State,\n  options?: Options\n): string {\n  if (state == null) {\n    throw Error(\n      \"Got 'undefined' for the navigation state. You must pass a valid state object.\"\n    );\n  }\n\n  const [legacy, compatOptions] = checkLegacyPathConfig(options);\n\n  // Create a normalized configs object which will be easier to use\n  const configs: Record<string, ConfigItem> = compatOptions\n    ? createNormalizedConfigs(legacy, compatOptions.screens)\n    : {};\n\n  let path = '/';\n  let current: State | undefined = state;\n\n  const allParams: Record<string, any> = {};\n\n  while (current) {\n    let index = typeof current.index === 'number' ? current.index : 0;\n    let route = current.routes[index] as Route<string> & {\n      state?: State;\n    };\n\n    let pattern: string | undefined;\n\n    let focusedParams: Record<string, any> | undefined;\n    let focusedRoute = getActiveRoute(state);\n    let currentOptions = configs;\n\n    // Keep all the route names that appeared during going deeper in config in case the pattern is resolved to undefined\n    let nestedRouteNames = [];\n\n    let hasNext = true;\n\n    while (route.name in currentOptions && hasNext) {\n      pattern = currentOptions[route.name].pattern;\n\n      nestedRouteNames.push(route.name);\n\n      if (route.params) {\n        const stringify = currentOptions[route.name]?.stringify;\n\n        const currentParams = fromEntries(\n          Object.entries(route.params).map(([key, value]) => [\n            key,\n            stringify?.[key] ? stringify[key](value) : String(value),\n          ])\n        );\n\n        if (pattern) {\n          Object.assign(allParams, currentParams);\n        }\n\n        if (focusedRoute === route) {\n          // If this is the focused route, keep the params for later use\n          // We save it here since it's been stringified already\n          focusedParams = { ...currentParams };\n\n          pattern\n            ?.split('/')\n            .filter((p) => p.startsWith(':'))\n            // eslint-disable-next-line no-loop-func\n            .forEach((p) => {\n              const name = getParamName(p);\n\n              // Remove the params present in the pattern since we'll only use the rest for query string\n              if (focusedParams) {\n                // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n                delete focusedParams[name];\n              }\n            });\n        }\n      }\n\n      // If there is no `screens` property or no nested state, we return pattern\n      if (!currentOptions[route.name].screens || route.state === undefined) {\n        hasNext = false;\n      } else {\n        index =\n          typeof route.state.index === 'number'\n            ? route.state.index\n            : route.state.routes.length - 1;\n\n        const nextRoute = route.state.routes[index];\n        const nestedConfig = currentOptions[route.name].screens;\n\n        // if there is config for next route name, we go deeper\n        if (nestedConfig && nextRoute.name in nestedConfig) {\n          route = nextRoute as Route<string> & { state?: State };\n          currentOptions = nestedConfig;\n        } else {\n          // If not, there is no sense in going deeper in config\n          hasNext = false;\n        }\n      }\n    }\n\n    if (pattern === undefined) {\n      pattern = nestedRouteNames.join('/');\n    }\n\n    if (currentOptions[route.name] !== undefined) {\n      path += pattern\n        .split('/')\n        .map((p) => {\n          const name = getParamName(p);\n\n          // We don't know what to show for wildcard patterns\n          // Showing the route name seems ok, though whatever we show here will be incorrect\n          // Since the page doesn't actually exist\n          if (p === '*') {\n            if (legacy) {\n              throw new Error(\n                \"Please update your config to the new format to use wildcard pattern ('*'). https://reactnavigation.org/docs/configuring-links/#updating-config\"\n              );\n            }\n\n            return route.name;\n          }\n\n          // If the path has a pattern for a param, put the param in the path\n          if (p.startsWith(':')) {\n            const value = allParams[name];\n\n            if (value === undefined && p.endsWith('?')) {\n              // Optional params without value assigned in route.params should be ignored\n              return '';\n            }\n\n            return encodeURIComponent(value);\n          }\n\n          return encodeURIComponent(p);\n        })\n        .join('/');\n    } else {\n      path += encodeURIComponent(route.name);\n    }\n\n    if (!focusedParams) {\n      focusedParams = focusedRoute.params;\n    }\n\n    if (route.state) {\n      path += '/';\n    } else if (focusedParams) {\n      for (let param in focusedParams) {\n        if (focusedParams[param] === 'undefined') {\n          // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n          delete focusedParams[param];\n        }\n      }\n\n      const query = queryString.stringify(focusedParams);\n\n      if (query) {\n        path += `?${query}`;\n      }\n    }\n\n    current = route.state;\n  }\n\n  // Remove multiple as well as trailing slashes\n  path = path.replace(/\\/+/g, '/');\n  path = path.length > 1 ? path.replace(/\\/$/, '') : path;\n\n  return path;\n}\n\n// Object.fromEntries is not available in older iOS versions\nconst fromEntries = <K extends string, V>(entries: (readonly [K, V])[]) =>\n  entries.reduce((acc, [k, v]) => {\n    acc[k] = v;\n    return acc;\n  }, {} as Record<K, V>);\n\nconst getParamName = (pattern: string) =>\n  pattern.replace(/^:/, '').replace(/\\?$/, '');\n\nconst joinPaths = (...paths: string[]): string =>\n  ([] as string[])\n    .concat(...paths.map((p) => p.split('/')))\n    .filter(Boolean)\n    .join('/');\n\nconst createConfigItem = (\n  legacy: boolean,\n  config: PathConfig | string,\n  parentPattern?: string\n): ConfigItem => {\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n\n    return { pattern };\n  }\n\n  // If an object is specified as the value (e.g. Foo: { ... }),\n  // It can have `path` property and `screens` prop which has nested configs\n  let pattern: string | undefined;\n\n  if (legacy) {\n    pattern =\n      config.exact !== true && parentPattern && config.path\n        ? joinPaths(parentPattern, config.path)\n        : config.path;\n  } else {\n    if (config.exact && config.path === undefined) {\n      throw new Error(\n        \"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\"\n      );\n    }\n\n    pattern =\n      config.exact !== true\n        ? joinPaths(parentPattern || '', config.path || '')\n        : config.path || '';\n  }\n\n  const screens = config.screens\n    ? createNormalizedConfigs(legacy, config.screens, pattern)\n    : undefined;\n\n  return {\n    // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n    pattern: pattern?.split('/').filter(Boolean).join('/'),\n    stringify: config.stringify,\n    screens,\n  };\n};\n\nconst createNormalizedConfigs = (\n  legacy: boolean,\n  options: PathConfigMap,\n  pattern?: string\n): Record<string, ConfigItem> =>\n  fromEntries(\n    Object.entries(options).map(([name, c]) => {\n      const result = createConfigItem(legacy, c, pattern);\n\n      return [name, result];\n    })\n  );\n"]},"metadata":{},"sourceType":"module"}