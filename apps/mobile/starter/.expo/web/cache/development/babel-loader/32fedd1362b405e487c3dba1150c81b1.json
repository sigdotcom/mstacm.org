{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { nanoid } from 'nanoid/non-secure';\nimport TabRouter, { TabActions } from \"./TabRouter\";\nexport var DrawerActions = _objectSpread(_objectSpread({}, TabActions), {}, {\n  openDrawer: function openDrawer() {\n    return {\n      type: 'OPEN_DRAWER'\n    };\n  },\n  closeDrawer: function closeDrawer() {\n    return {\n      type: 'CLOSE_DRAWER'\n    };\n  },\n  toggleDrawer: function toggleDrawer() {\n    return {\n      type: 'TOGGLE_DRAWER'\n    };\n  }\n});\n\nvar isDrawerOpen = function isDrawerOpen(state) {\n  var _state$history;\n\n  return Boolean((_state$history = state.history) === null || _state$history === void 0 ? void 0 : _state$history.find(function (it) {\n    return it.type === 'drawer';\n  }));\n};\n\nvar openDrawer = function openDrawer(state) {\n  if (isDrawerOpen(state)) {\n    return state;\n  }\n\n  return _objectSpread(_objectSpread({}, state), {}, {\n    history: [].concat(_toConsumableArray(state.history), [{\n      type: 'drawer'\n    }])\n  });\n};\n\nvar closeDrawer = function closeDrawer(state) {\n  if (!isDrawerOpen(state)) {\n    return state;\n  }\n\n  return _objectSpread(_objectSpread({}, state), {}, {\n    history: state.history.filter(function (it) {\n      return it.type !== 'drawer';\n    })\n  });\n};\n\nexport default function DrawerRouter(_ref) {\n  var openByDefault = _ref.openByDefault,\n      rest = _objectWithoutProperties(_ref, [\"openByDefault\"]);\n\n  var router = TabRouter(rest);\n  return _objectSpread(_objectSpread({}, router), {}, {\n    type: 'drawer',\n    getInitialState: function getInitialState(_ref2) {\n      var routeNames = _ref2.routeNames,\n          routeParamList = _ref2.routeParamList;\n      var state = router.getInitialState({\n        routeNames: routeNames,\n        routeParamList: routeParamList\n      });\n\n      if (openByDefault) {\n        state = openDrawer(state);\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        stale: false,\n        type: 'drawer',\n        key: \"drawer-\".concat(nanoid())\n      });\n    },\n    getRehydratedState: function getRehydratedState(partialState, _ref3) {\n      var routeNames = _ref3.routeNames,\n          routeParamList = _ref3.routeParamList;\n\n      if (partialState.stale === false) {\n        return partialState;\n      }\n\n      var state = router.getRehydratedState(partialState, {\n        routeNames: routeNames,\n        routeParamList: routeParamList\n      });\n\n      if (isDrawerOpen(partialState)) {\n        state = openDrawer(state);\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        type: 'drawer',\n        key: \"drawer-\".concat(nanoid())\n      });\n    },\n    getStateForRouteFocus: function getStateForRouteFocus(state, key) {\n      var result = router.getStateForRouteFocus(state, key);\n\n      if (openByDefault) {\n        return openDrawer(result);\n      }\n\n      return closeDrawer(result);\n    },\n    getStateForAction: function getStateForAction(state, action, options) {\n      switch (action.type) {\n        case 'OPEN_DRAWER':\n          return openDrawer(state);\n\n        case 'CLOSE_DRAWER':\n          return closeDrawer(state);\n\n        case 'TOGGLE_DRAWER':\n          if (isDrawerOpen(state)) {\n            return closeDrawer(state);\n          }\n\n          return openDrawer(state);\n\n        case 'GO_BACK':\n          if (openByDefault) {\n            if (!isDrawerOpen(state)) {\n              return openDrawer(state);\n            }\n          } else {\n            if (isDrawerOpen(state)) {\n              return closeDrawer(state);\n            }\n          }\n\n          return router.getStateForAction(state, action, options);\n\n        default:\n          return router.getStateForAction(state, action, options);\n      }\n    },\n    actionCreators: DrawerActions\n  });\n}","map":{"version":3,"sources":["DrawerRouter.tsx"],"names":["DrawerActions","openDrawer","type","closeDrawer","toggleDrawer","isDrawerOpen","state","Boolean","it","history","rest","router","TabRouter","getInitialState","routeParamList","routeNames","stale","key","nanoid","getRehydratedState","partialState","getStateForRouteFocus","result","getStateForAction","action","actionCreators"],"mappings":"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","sourcesContent":["import { nanoid } from 'nanoid/non-secure';\nimport type {\n  PartialState,\n  CommonNavigationAction,\n  Router,\n  ParamListBase,\n} from './types';\nimport TabRouter, {\n  TabActions,\n  TabActionType,\n  TabRouterOptions,\n  TabNavigationState,\n  TabActionHelpers,\n} from './TabRouter';\n\nexport type DrawerActionType =\n  | TabActionType\n  | {\n      type: 'OPEN_DRAWER' | 'CLOSE_DRAWER' | 'TOGGLE_DRAWER';\n      source?: string;\n      target?: string;\n    };\n\nexport type DrawerRouterOptions = TabRouterOptions & {\n  openByDefault?: boolean;\n};\n\nexport type DrawerNavigationState = Omit<\n  TabNavigationState,\n  'type' | 'history'\n> & {\n  /**\n   * Type of the router, in this case, it's drawer.\n   */\n  type: 'drawer';\n  /**\n   * List of previously visited route keys and drawer open status.\n   */\n  history: ({ type: 'route'; key: string } | { type: 'drawer' })[];\n};\n\nexport type DrawerActionHelpers<\n  ParamList extends ParamListBase\n> = TabActionHelpers<ParamList> & {\n  /**\n   * Open the drawer sidebar.\n   */\n  openDrawer(): void;\n\n  /**\n   * Close the drawer sidebar.\n   */\n  closeDrawer(): void;\n\n  /**\n   * Open the drawer sidebar if closed, or close if opened.\n   */\n  toggleDrawer(): void;\n};\n\nexport const DrawerActions = {\n  ...TabActions,\n  openDrawer(): DrawerActionType {\n    return { type: 'OPEN_DRAWER' };\n  },\n  closeDrawer(): DrawerActionType {\n    return { type: 'CLOSE_DRAWER' };\n  },\n  toggleDrawer(): DrawerActionType {\n    return { type: 'TOGGLE_DRAWER' };\n  },\n};\n\nconst isDrawerOpen = (\n  state: DrawerNavigationState | PartialState<DrawerNavigationState>\n) => Boolean(state.history?.find((it) => it.type === 'drawer'));\n\nconst openDrawer = (state: DrawerNavigationState): DrawerNavigationState => {\n  if (isDrawerOpen(state)) {\n    return state;\n  }\n\n  return {\n    ...state,\n    history: [...state.history, { type: 'drawer' }],\n  };\n};\n\nconst closeDrawer = (state: DrawerNavigationState): DrawerNavigationState => {\n  if (!isDrawerOpen(state)) {\n    return state;\n  }\n\n  return {\n    ...state,\n    history: state.history.filter((it) => it.type !== 'drawer'),\n  };\n};\n\nexport default function DrawerRouter({\n  openByDefault,\n  ...rest\n}: DrawerRouterOptions): Router<\n  DrawerNavigationState,\n  DrawerActionType | CommonNavigationAction\n> {\n  const router = (TabRouter(rest) as unknown) as Router<\n    DrawerNavigationState,\n    TabActionType | CommonNavigationAction\n  >;\n\n  return {\n    ...router,\n\n    type: 'drawer',\n\n    getInitialState({ routeNames, routeParamList }) {\n      let state = router.getInitialState({ routeNames, routeParamList });\n\n      if (openByDefault) {\n        state = openDrawer(state);\n      }\n\n      return {\n        ...state,\n        stale: false,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`,\n      };\n    },\n\n    getRehydratedState(partialState, { routeNames, routeParamList }) {\n      if (partialState.stale === false) {\n        return partialState;\n      }\n\n      let state = router.getRehydratedState(partialState, {\n        routeNames,\n        routeParamList,\n      });\n\n      if (isDrawerOpen(partialState)) {\n        state = openDrawer(state);\n      }\n\n      return {\n        ...state,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`,\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const result = router.getStateForRouteFocus(state, key);\n\n      if (openByDefault) {\n        return openDrawer(result);\n      }\n\n      return closeDrawer(result);\n    },\n\n    getStateForAction(state, action, options) {\n      switch (action.type) {\n        case 'OPEN_DRAWER':\n          return openDrawer(state);\n\n        case 'CLOSE_DRAWER':\n          return closeDrawer(state);\n\n        case 'TOGGLE_DRAWER':\n          if (isDrawerOpen(state)) {\n            return closeDrawer(state);\n          }\n\n          return openDrawer(state);\n\n        case 'GO_BACK':\n          if (openByDefault) {\n            if (!isDrawerOpen(state)) {\n              return openDrawer(state);\n            }\n          } else {\n            if (isDrawerOpen(state)) {\n              return closeDrawer(state);\n            }\n          }\n\n          return router.getStateForAction(state, action, options);\n\n        default:\n          return router.getStateForAction(state, action, options);\n      }\n    },\n\n    actionCreators: DrawerActions,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}