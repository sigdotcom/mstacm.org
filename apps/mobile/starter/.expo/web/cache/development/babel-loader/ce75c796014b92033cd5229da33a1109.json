{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport default function getActionFromState(state) {\n  if (state.routes.length === 0) {\n    return undefined;\n  }\n\n  var route = state.routes[state.routes.length - 1];\n  var payload = {\n    name: route.name,\n    params: _objectSpread({}, route.params)\n  };\n  var current = route.state;\n  var params = payload.params;\n\n  while (current) {\n    if (current.routes.length === 0) {\n      return undefined;\n    }\n\n    route = current.routes[current.routes.length - 1];\n    params.initial = current.routes.length === 1;\n    params.screen = route.name;\n\n    if (route.state) {\n      params.params = _objectSpread({}, route.params);\n      params = params.params;\n    } else {\n      params.params = route.params;\n    }\n\n    current = route.state;\n  }\n\n  return {\n    type: 'NAVIGATE',\n    payload: payload\n  };\n}","map":{"version":3,"sources":["getActionFromState.tsx"],"names":["state","route","payload","name","params","current","type"],"mappings":";;;;;;AAaA,eAAe,SAAA,kBAAA,CAAA,KAAA,EAEe;AAC5B,MAAIA,KAAK,CAALA,MAAAA,CAAAA,MAAAA,KAAJ,CAAA,EAA+B;AAC7B,WAAA,SAAA;AAF0B;;AAO5B,MAAIC,KAAK,GAAGD,KAAK,CAALA,MAAAA,CAAaA,KAAK,CAALA,MAAAA,CAAAA,MAAAA,GAAzB,CAAYA,CAAZ;AAEA,MAAIE,OAAiD,GAAG;AACtDC,IAAAA,IAAI,EAAEF,KAAK,CAD2C,IAAA;AAEtDG,IAAAA,MAAM,oBAAOH,KAAK,CAACG,MAAb;AAFgD,GAAxD;AAKA,MAAIC,OAAO,GAAGJ,KAAK,CAAnB,KAAA;AACA,MAAIG,MAAM,GAAGF,OAAO,CAApB,MAAA;;AAEA,SAAA,OAAA,EAAgB;AACd,QAAIG,OAAO,CAAPA,MAAAA,CAAAA,MAAAA,KAAJ,CAAA,EAAiC;AAC/B,aAAA,SAAA;AACD;;AAEDJ,IAAAA,KAAK,GAAGI,OAAO,CAAPA,MAAAA,CAAeA,OAAO,CAAPA,MAAAA,CAAAA,MAAAA,GAAvBJ,CAAQI,CAARJ;AACAG,IAAAA,MAAM,CAANA,OAAAA,GAAiBC,OAAO,CAAPA,MAAAA,CAAAA,MAAAA,KAAjBD,CAAAA;AACAA,IAAAA,MAAM,CAANA,MAAAA,GAAgBH,KAAK,CAArBG,IAAAA;;AAEA,QAAIH,KAAK,CAAT,KAAA,EAAiB;AACfG,MAAAA,MAAM,CAANA,MAAAA,qBAAqBH,KAAK,CAACG,MAA3BA;AACAA,MAAAA,MAAM,GAAGA,MAAM,CAAfA,MAAAA;AAFF,KAAA,MAGO;AACLA,MAAAA,MAAM,CAANA,MAAAA,GAAgBH,KAAK,CAArBG,MAAAA;AACD;;AAEDC,IAAAA,OAAO,GAAGJ,KAAK,CAAfI,KAAAA;AACD;;AAED,SAAO;AACLC,IAAAA,IAAI,EADC,UAAA;AAELJ,IAAAA,OAAAA,EAAAA;AAFK,GAAP;AAID","sourcesContent":["import type { PartialState, NavigationState } from '@react-navigation/routers';\n\ntype NavigateParams = {\n  screen?: string;\n  params?: NavigateParams;\n  initial?: boolean;\n};\n\ntype NavigateAction = {\n  type: 'NAVIGATE';\n  payload: { name: string; params: NavigateParams };\n};\n\nexport default function getActionFromState(\n  state: PartialState<NavigationState>\n): NavigateAction | undefined {\n  if (state.routes.length === 0) {\n    return undefined;\n  }\n\n  // Try to construct payload for a `NAVIGATE` action from the state\n  // This lets us preserve the navigation state and not lose it\n  let route = state.routes[state.routes.length - 1];\n\n  let payload: { name: string; params: NavigateParams } = {\n    name: route.name,\n    params: { ...route.params },\n  };\n\n  let current = route.state;\n  let params = payload.params;\n\n  while (current) {\n    if (current.routes.length === 0) {\n      return undefined;\n    }\n\n    route = current.routes[current.routes.length - 1];\n    params.initial = current.routes.length === 1;\n    params.screen = route.name;\n\n    if (route.state) {\n      params.params = { ...route.params };\n      params = params.params;\n    } else {\n      params.params = route.params;\n    }\n\n    current = route.state;\n  }\n\n  return {\n    type: 'NAVIGATE',\n    payload,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}